final class AppRegExpText {
  AppRegExpText._();

// Regular Expression
  static String kRegExpEmail =
      r"^[a-zA-Z0-9.a-zA-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+";
  static String kRegExpPhone =
      // ignore: prefer_adjacent_string_concatenation
      "(\\+[0-9]+[\\- \\.]*)?(\\([0-9]+\\)[\\- \\.]*)?" +
          "([0-9][0-9\\- \\.]+[0-9])";

  static String patternMail =
      r"^(([^<>()[\]\\.,;:\s@\']+(\.[^<>()[\]\\.,;:\s@\']+)*)|(\'.+\'))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$";

  static String validateName(String name, String error) {
    if (name.length < 3) {
      return 'Name must be at least 3 characters long.';
    }
    return error;
  }
}

// Keys
const String kKeyStatus = 'status';
const String kKeyJsonObject = 'json_object';
const String kKeyJsonArray = 'json_array';
const String kKeyStringData = 'string_data';
const String kKeyMessage = 'message';
const String kKeyData = 'data';
const String kKeyWishList = 'wishlist';
const String kKeyCurrencyCode = 'currency_code';
const String kKeyCurrencyCodeValue = 'currency_code_value';
const String kKeyCode = 'code';
const String kKeyIsLoggedIn = 'is_logged_in';
const String kKeyAccessToken = 'access_token';
const String kPhone = 'phone_number';
const String kKeySelectedLocation = 'selected_location';
const String kKeySelectedLat = 'selected_lot';
const String kKeySelectedLng = 'selected_lng';
const String kKeyAddress = 'address';
const String kKeyCurrency = 'currency';
const String kKeyLanguage = 'language';
const String kKeyLanguageCode = 'language_code';
const String kKeyCountryCode = 'language_code';
const String kKeyCountryName = 'country_name';
const String kKeyName = 'name';
const String kKeyToken = 'token';
const String kKeyUuid = 'uuid';
const String kKeyUuidForgetPassword = 'userUuid';
const String kKeyUserOtp = 'otp';
const String kKeyInitialToken = 'initial_token';
const String kKeySecretKey = 'secret_key';
const String kKeyTokenType = 'token_type';
const String kKeyDeviceToken = 'device_token';
const String kKeyUser = 'user';
const String kKeyEmailVerifiedAt = 'email_verified_at';
const String kKeyPhoneVerifiedAt = 'phone_verified_at';
const String kKeyFaqText = 'faq_text';
const String kKeyTermsAndConditionsText = 'toc_text';
const String kKeyAverageRating = 'average_rating';
const String kKeyViews = 'views';
const String kKeyProvider = 'provider';
const String kFacebook = 'facebook';
const String kApple = 'apple';
const String kGoogle = 'google';
const String kKeyEnglish = 'en';
const String kKeyPortuguese = 'pt';
const String kKeyFrench = 'fr';
const String kKeyGerman = 'de';
const String kKeySpanish = 'es';
const String kKeyRussian = 'ru';
const String kKeyFirstName = 'first_name';
const String kKeyLastName = 'lst_name';
const String kKeyFirstTime = 'first_time';
const String kKeyDeviceID = 'device_id';
const String kKeyUserID = 'user_id';
const String kKeyShopID = 'shop_id';
const String kKeycategoriesID = 'categoriesId';
const String kKeyproductID = 'productId';
const String kKeyShopSlug = 'shop_slug';
const String kKeyRestaurantID = 'productId';
const String kKeyIsExploring = 'exploring';
const String kKeyHotSale = '';
const String kKeyRecommendation = 'recommendation';
const String kKeyCotton = 'cotton';
const String kKeyCart = 'cart';

const List<String> kLanguagesKey = [
  kKeyEnglish,
  kKeyPortuguese,
  kKeyFrench,
  kKeyGerman,
  kKeySpanish,
  kKeyRussian,
];
const Map languages = <String, String>{
  kKeyEnglish: "English",
  kKeyPortuguese: "Portuguese",
  kKeyFrench: "French",
  kKeyGerman: "Dutch",
  kKeySpanish: "Spanish",
  kKeyRussian: "Russian",
};
const Map countriesCode = <String, String>{
  kKeyEnglish: "US",
  kKeyPortuguese: "PT",
  kKeyFrench: "FR",
  kKeyGerman: "DE",
  kKeySpanish: "ES",
  kKeyRussian: "RU",
};

String getHotSaleTitle(String languageCode) {
  switch (languageCode) {
    case 'bn': // Bangla
      return "ржЖржЬржХрзЗрж░ рж╣ржЯ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ";
    case 'hi': // Hindi
      return "рдЖрдЬ рдХреНрдпрд╛ рдЪрд░реНрдЪрд╛ рд╣реИ?";
    case 'ar': // Arabic
      return "┘Е╪з ┘З┘И ╪з┘Д╪│╪з╪о┘Ж ╪з┘Д┘К┘И┘Е?";
    default: // Default to English
      return "Hot Sale";
  }
}

String getViewAllText(String languageCode) {
  switch (languageCode) {
    case 'bn': // Bangla
      return "рж╕ржм ржжрзЗржЦрзБржи";
    case 'hi': // Hindi
      return "рд╕рднреА рджреЗрдЦреЗрдВ";
    case 'ar': // Arabic
      return "╪╣╪▒╪╢ ╪з┘Д┘Г┘Д";
    default: // English
      return "View All";
  }
}

String getRecommendationTitle(String languageCode) {
  switch (languageCode) {
    case 'bn': // Bangla
      return "рж╕рзБржкрж╛рж░рж┐рж╢ржХрзГржд ржкржгрзНржп";
    case 'hi': // Hindi
      return "рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд┐рдП рдЧрдП рдЙрддреНрдкрд╛рдж";
    case 'ar': // Arabic
      return "╪з┘Д┘Е┘Ж╪к╪м╪з╪к ╪з┘Д┘Е┘И╪╡┘Й ╪и┘З╪з";
    default: // English
      return "Recommendation";
  }
}

/// **ЁЯУЭ Get Translated Category Title**
String getTranslatedCategoryTitle(dynamic category, String languageCode) {
  for (var lang in category.languageDetail) {
    if (lang.language.lngcode == languageCode) {
      return lang.title;
    }
  }
  return category.defaultLanguage.title; // Fallback to default
}

/// **ЁЯФН Get Translated Search Text**
String getSearchText(String languageCode) {
  switch (languageCode) {
    case 'bn':
      return "ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи  ";
    case 'hi':
      return "рдЦреЛрдЬреЗрдВ  ";
    case 'ar':
      return "╪и╪н╪л    ";
    default:
      return "Search   ";
  }
}

/// **ЁЯУМ No Categories Found Message**
String getNoCategoriesText(String languageCode) {
  switch (languageCode) {
    case 'bn':
      return "ржХрзЛржирзЛ ржмрж┐ржнрж╛ржЧ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред";
    case 'hi':
      return "рдХреЛрдИ рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИрдВред";
    case 'ar':
      return "┘Д╪з ╪к┘И╪м╪п ┘Б╪ж╪з╪к ┘Е╪к╪з╪н╪й.";
    default:
      return "No categories available.";
  }
}

List<String> getSearchSuggestions(String languageCode) {
  Map<String, List<String>> searchSuggestions = {
    "en": ["Product...", "Category...", "Saree...", "Bag..."],
    "bn": ["ржкржгрзНржп...", "рж╢рзНрж░рзЗржгрзА...", "рж╢рж╛ржбрж╝рж┐...", "ржмрзНржпрж╛ржЧ..."],
    "hi": ["рдЙрддреНрдкрд╛рдж...", "рд╢реНрд░реЗрдгреА...", "рд╕рд╛рдбрд╝реА...", "рдмреИрдЧ..."],
    "ar": ["┘Е┘Ж╪к╪м...", "┘Б╪ж╪й...", "╪│╪з╪▒┘К...", "╪н┘В┘К╪и╪й..."],
  };

  return searchSuggestions[languageCode] ?? searchSuggestions["en"]!;
}

String getNoProductsText(String languageCode) {
  switch (languageCode) {
    case 'bn':
      return "ржкржгрзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржЪрзНржЫрзЗ ржирж╛";
    case 'hi':
      return "рдЙрддреНрдкрд╛рдж рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИрдВ";
    case 'ar':
      return "╪з┘Д┘Е┘Ж╪к╪м╪з╪к ╪║┘К╪▒ ┘Е╪к┘И┘Б╪▒╪й.";
    default:
      return "Products are not available";
  }
}

/// **ЁЯФа Get Localized Text Based on Language Code**
String getLocalizedText(String key, String languageCode) {
  Map<String, Map<String, String>> translations = {
    "Logout": {
      "en": "Logout",
      "bn": "рж▓ржЧржЖржЙржЯ",
      "hi": "рд▓реЙрдЧ рдЖрдЙрдЯ",
      "ar": "╪к╪│╪м┘К┘Д ╪з┘Д╪о╪▒┘И╪м"
    },
    "Log In": {
      "en": "Log In",
      "bn": "рж▓ржЧржЗржи ржХрж░рзБржи",
      "hi": "рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ",
      "ar": "╪к╪│╪м┘К┘Д ╪з┘Д╪п╪о┘И┘Д"
    },
    "Edit Profile": {
      "en": "Edit Profile",
      "bn": "ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржорзНржкрж╛ржжржирж╛ ржХрж░рзБржи",
      "hi": "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ",
      "ar": "╪к╪╣╪п┘К┘Д ╪з┘Д┘Е┘Д┘Б ╪з┘Д╪┤╪о╪╡┘К"
    },
    "My Orders": {
      "en": "My Orders",
      "bn": "ржЖржорж╛рж░ ржЕрж░рзНржбрж╛рж░",
      "hi": "рдореЗрд░реЗ рдЖрджреЗрд╢",
      "ar": "╪╖┘Д╪и╪з╪к┘К"
    },
    "My Address": {
      "en": "My Address",
      "bn": "ржЖржорж╛рж░ ржарж┐ржХрж╛ржирж╛",
      "hi": "рдореЗрд░рд╛ рдкрддрд╛",
      "ar": "╪╣┘Ж┘И╪з┘Ж┘К"
    },
    "Set Shopping Delivery Address": {
      "en": "Set Shopping Delivery Address",
      "bn": "рж╢ржкрж┐ржВ ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржарж┐ржХрж╛ржирж╛ рж╕рзЗржЯ ржХрж░рзБржи",
      "hi": "рд╢реЙрдкрд┐рдВрдЧ рдбрд┐рд▓реАрд╡рд░реА рдкрддрд╛ рд╕реЗрдЯ рдХрд░реЗрдВ",
      "ar": "╪к╪╣┘К┘К┘Ж ╪╣┘Ж┘И╪з┘Ж ╪к┘И╪╡┘К┘Д ╪з┘Д╪к╪│┘И┘В"
    },
    "My Pre Order": {
      "en": "My Pre Order",
      "bn": "ржЖржорж╛рж░ ржкрзВрж░рзНржм ржЕрж░рзНржбрж╛рж░",
      "hi": "рдореЗрд░рд╛ рдкреВрд░реНрд╡ рдЖрджреЗрд╢",
      "ar": "╪╖┘Д╪и┘К ╪з┘Д┘Е╪│╪и┘В"
    },
    "Get Shopping Pre Order Lists": {
      "en": "Get Shopping Pre Order Lists",
      "bn": "рж╢ржкрж┐ржВ ржкрзВрж░рзНржм ржЕрж░рзНржбрж╛рж░ рждрж╛рж▓рж┐ржХрж╛ ржкрж╛ржи",
      "hi": "рд╢реЙрдкрд┐рдВрдЧ рдкреВрд░реНрд╡ рдЖрджреЗрд╢ рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
      "ar": "╪з╪н╪╡┘Д ╪╣┘Д┘Й ┘В┘И╪з╪ж┘Е ╪з┘Д╪╖┘Д╪и╪з╪к ╪з┘Д┘Е╪│╪и┘В╪й ┘Д┘Д╪к╪│┘И┘В"
    },
    "In progress and Completed Orders": {
      "en": "In progress and Completed Orders",
      "bn": "ржЪрж▓ржорж╛ржи ржПржмржВ рж╕ржорзНржкржирзНржи ржЕрж░рзНржбрж╛рж░",
      "hi": "рдкреНрд░рдЧрддрд┐ рдореЗрдВ рдФрд░ рдкреВрд░реНрдг рдЖрджреЗрд╢",
      "ar": "╪з┘Д╪╖┘Д╪и╪з╪к ┘В┘К╪п ╪з┘Д╪к┘Ж┘Б┘К╪░ ┘И╪з┘Д┘Е┘Г╪к┘Е┘Д╪й"
    },
    "My Wishlist": {
      "en": "My Wishlist",
      "bn": "ржЖржорж╛рж░ ржЙржЗрж╢рж▓рж┐рж╕рзНржЯ",
      "hi": "рдореЗрд░реА рдкрд╕рдВрджреАрджрд╛ рд╕реВрдЪреА",
      "ar": "┘В╪з╪ж┘Е╪й ╪з┘Д╪г┘Е┘Ж┘К╪з╪к ╪з┘Д╪о╪з╪╡╪й ╪и┘К"
    },
    "Account Information": {
      "en": "Account Information",
      "bn": "ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рждржерзНржп",
      "hi": "рдЦрд╛рддрд╛ рдЬрд╛рдирдХрд╛рд░реА",
      "ar": "┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д╪н╪│╪з╪и"
    },
    "Get Shopping Wish Lists": {
      "en": "Get Shopping Wish Lists",
      "bn": "рж╢ржкрж┐ржВ ржЙржЗрж╢ рж▓рж┐рж╕рзНржЯ ржкрж╛ржи",
      "hi": "рдЦрд░реАрджрд╛рд░реА рдкрд╕рдВрджреАрджрд╛ рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
      "ar": "╪з╪н╪╡┘Д ╪╣┘Д┘Й ┘В┘И╪з╪ж┘Е ╪з┘Д╪г┘Е┘Ж┘К╪з╪к ┘Д┘Д╪к╪│┘И┘В"
    },
    "Localization": {
      "en": "Localization",
      "bn": "рж╕рзНржерж╛ржирзАржпрж╝ржХрж░ржг",
      "hi": "рд╕реНрдерд╛рдиреАрдпрдХрд░рдг",
      "ar": "╪з┘Д╪к╪╣╪▒┘К╪и"
    },
    "Select your preferred language": {
      "en": "Select your preferred language",
      "bn": "ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
      "hi": "рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
      "ar": "╪з╪о╪к╪▒ ┘Д╪║╪к┘Г ╪з┘Д┘Е┘Б╪╢┘Д╪й"
    },
    "Rate Our App": {
      "en": "Rate Our App",
      "bn": "ржЖржорж╛ржжрзЗрж░ ржЕрзНржпрж╛ржк рж░рзЗржЯ ржХрж░рзБржи",
      "hi": "рд╣рдорд╛рд░реЗ рдРрдк рдХреЛ рд░реЗрдЯ рдХрд░реЗрдВ",
      "ar": "┘В┘К┘Е ╪к╪╖╪и┘К┘В┘Ж╪з"
    },
    "Share your feedback and rate us": {
      "en": "Share your feedback and rate us",
      "bn": "ржЖржкржирж╛рж░ ржорждрж╛ржоржд рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи ржПржмржВ ржЖржорж╛ржжрзЗрж░ рж░рзЗржЯ ржжрж┐ржи",
      "hi": "рдЕрдкрдиреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ рдФрд░ рд╣рдореЗрдВ рд░реЗрдЯ рдХрд░реЗрдВ",
      "ar": "╪┤╪з╪▒┘Г ╪и╪к╪╣┘Д┘К┘В╪з╪к┘Г ┘И┘В┘К┘Е┘Ж╪з"
    },
    "Change Password": {
      "en": "Change Password",
      "bn": "ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи",
      "hi": "рдкрд╛рд╕рд╡рд░реНрдб рдмрджрд▓реЗрдВ",
      "ar": "╪к╪║┘К┘К╪▒ ┘Г┘Д┘Е╪й ╪з┘Д┘Е╪▒┘И╪▒"
    },
    "Change Your Password": {
      "en": "Change Your Password",
      "bn": "ржЖржкржирж╛рж░ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи",
      "hi": "рдЕрдкрдирд╛ рдкрд╛рд╕рд╡рд░реНрдб рдмрджрд▓реЗрдВ",
      "ar": "┘В┘Е ╪и╪к╪║┘К┘К╪▒ ┘Г┘Д┘Е╪й ╪з┘Д┘Е╪▒┘И╪▒ ╪з┘Д╪о╪з╪╡╪й ╪и┘Г"
    },
    "Guest": {"en": "Guest", "bn": "ржЕрждрж┐ржерж┐", "hi": "рдЕрддрд┐рдерд┐", "ar": "╪▓╪з╪ж╪▒"},
    "Tap to Login": {
      "en": "Tap to Login",
      "bn": "рж▓ржЧржЗржи ржХрж░рждрзЗ ржЯрзНржпрж╛ржк ржХрж░рзБржи",
      "hi": "рд▓реЙрдЧрд┐рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЯреИрдк рдХрд░реЗрдВ",
      "ar": "╪з╪╢╪║╪╖ ┘Д╪к╪│╪м┘К┘Д ╪з┘Д╪п╪о┘И┘Д"
    },
    "Product": {
      "en": "Product",
      "bn": "ржкржгрзНржп",
      "hi": "рдЙрддреНрдкрд╛рдж",
      "ar": "┘Е┘Ж╪к╪м",
    },
    "All Category": {
      "en": "All Category",
      "bn": "рж╕ржм ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐",
      "hi": "рд╕рднреА рд╢реНрд░реЗрдгрд┐рдпрд╛рдБ",
      "ar": "╪м┘Е┘К╪╣ ╪з┘Д┘Б╪ж╪з╪к"
    },
    "Profile": {
      "en": "Profile",
      "bn": "ржкрзНрж░рзЛржлрж╛ржЗрж▓",
      "hi": "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓",
      "ar": "╪з┘Д┘Е┘Д┘Б ╪з┘Д╪┤╪о╪╡┘К"
    }
  };

  return translations[key]?[languageCode] ?? translations[key]?["en"] ?? key;
}

class DefaultValue {
  static const bool kDefaultBoolean = false;
  static const int kDefaultInt = 0;
  static const double kDefaultDouble = 0.0;
  static const String kDefaultString = '';
}
